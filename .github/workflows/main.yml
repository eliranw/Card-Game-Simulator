name: Build and Release 
on:
  push: { branches: [develop, main] }
  release: { types: [published] }
jobs:
  buildForSomePlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    env:
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - iOS
    steps:
      - name: Checkout to current repo including Github-LFS Items (audio samples, videos, datasets, and graphics)
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Cache Library as artifact to improve workflow execution time
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-
      - uses: game-ci/unity-builder@v1.5
        with:
          versioning: Custom
          version: 1.1.1
          unityVersion: 2019.4.15f1
          targetPlatform: ${{ matrix.targetPlatform }}
          buildsPath: builds
      - uses: actions/upload-artifact@v2
#        if: github.event.ref != 'refs/heads/develop'
        with:
          name: ios-build
          path: builds
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload build to release
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: builds
          asset_name: ios-build.zip
          asset_content_type: application/zip
# # CD to app store 
#   releaseToAppStore:
#     name: Release to Google Play and the App Store
#     runs-on: macos-latest
#     needs: buildForSomePlatforms
#     if: github.event.action == 'published'
#     env:
#       APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}
#       APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
#       APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
#       APPLE_TEAM_NAME: ${{ secrets.APPLE_TEAM_NAME }}
#       FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
#       GOOGLE_PLAY_KEY_FILE: ${{ secrets.GOOGLE_PLAY_KEY_FILE }}
#       MAC_APPLICATION_CERTIFICATE: ${{ secrets.MAC_APPLICATION_CERTIFICATE }}
#       MAC_APPLICATION_PASSWORD: ${{ secrets.MAC_APPLICATION_PASSWORD }}
#       MAC_INSTALLER_CERTIFICATE: ${{ secrets.MAC_INSTALLER_CERTIFICATE }}
#       MAC_INSTALLER_PASSWORD: ${{ secrets.MAC_INSTALLER_PASSWORD }}
#       MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
#       MATCH_PERSONAL_ACCESS_TOKEN: ${{ secrets.MATCH_PERSONAL_ACCESS_TOKEN }}
#       MATCH_URL: ${{ secrets.MATCH_URL }}
#       BUILDS_PATH: ${{ format('{0}/builds', github.workspace) }}
#       GOOGLE_PLAY_KEY_FILE_PATH: ${{ format('{0}/fastlane/api-finoldigital.json', github.workspace) }}
#       ANDROID_PACKAGE_NAME: com.finoldigital.cardgamesim
#       IOS_APP_ID: com.finoldigital.CardGameSim
#       MAC_APP_ID: com.finoldigital.CardGameSimulator
#       PROJECT_NAME: Card Game Simulator
#       RELEASE_NOTES: ${{ github.event.release.body }}
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           lfs: true
#       - uses: actions/download-artifact@v1
#         with:
#           name: cgs-android-ios-mac-linux
#           path: builds
#       - uses: maierj/fastlane-action@v1.4.0
#         with:
#           lane: 'fixversion'
#       - name: Prepare for upload
#         run: |
#           echo "$GOOGLE_PLAY_KEY_FILE" > $GOOGLE_PLAY_KEY_FILE_PATH
#           echo "$RELEASE_NOTES" > fastlane/metadata/android/en-US/changelogs/default.txt
#           find $BUILDS_PATH -type f -iname "*.sh" -exec chmod +x {} \;
#           chmod +x fastlane/sign-osx-build.sh
#           ./fastlane/sign-osx-build.sh
#       - uses: maierj/fastlane-action@v1.4.0
#         with:
#           lane: 'android playstore'
#       - uses: maierj/fastlane-action@v1.4.0
#         with:
#           lane: 'ios release'
#       - uses: maierj/fastlane-action@v1.4.0
#         with:
#           lane: 'mac macupload'
